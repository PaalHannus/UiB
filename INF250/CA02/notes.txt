
Course Assignment 2:
	Two parts
		SVD (Singular value decomp)
		PCA (Principle comp analysis)

	

Part 1:
	Nice recap
	Sigma values are most important

	Only use singular values above a certain threshhold


	Images are three dimensional (height, width, color channels)


	SVD on two pictures, and comparing results
	
	Structured like the first course assignment
		Steps are written down

		Step by step guide

	
	We do not program the SVD ourself
		Look at documentation


	"Make sure to make efficient use of MATLAB abilities to work with matrices and submatrices"
	Dont use loops



	Mistake in text, compare both images not only one


	j values are different for each color channel



Part two (PCA)
	No step by step...

	Comment what part of the code corresponds to what task


	Dont need magic number in dataset-files
	
	Labels Number of labels, (matlab read 32-bit integer)

	Image: Number of images, Rows, cols, then we get 1 pixel at a time...
		first 28x28 pixels correspond to first image ...

		Pixels come rowwise
		Pixel values 0 - 255 (grayscale)




	Task 2:
		Compute PCA
			On train data
			With matlab or compute it ourself
			Must explain how it works if we use matlabs


	Task 3:
		Create 2D embedding
		A plot similar to the one above (Scatterplot)
		(g scatter ?) 


	Task 4:
		Use results from PCA to analyze test data
		Make scatterplot of testdata and analyze



	Task 7:
		Visualize eigenvector
		Make eigenvector into an image
		Look at eigenvector image
		eigenvector = vector with 28x28 values
		Turn it into a matrix

		Gets cool results?










magic = fread(fp, 1, 'int32', 0, 'ieee-be');
assert(magic == 2051, ['Bad magic number in ', filename, '']);

numImages = fread(fp, 1, 'int32', 0, 'ieee-be');
numRows = fread(fp, 1, 'int32', 0, 'ieee-be');
numCols = fread(fp, 1, 'int32', 0, 'ieee-be');

images = fread(fp, inf, 'unsigned char');
images = reshape(images, numCols, numRows, numImages);
images = permute(images,[2 1 3]);

fclose(fp);

% Reshape to #pixels x #examples
images = reshape(images, size(images, 1) * size(images, 2), size(images, 3));
% Convert to double and rescale to [0,1]
%images = double(images);

p = pca(images)




training_label_path = 'data/train-labels-idx1-ubyte';
lfp = fopen(training_label_path, 'rb');

magic_l = fread(lfp, 2, 'int32', 0, 'ieee-be');
labels = fread(lfp, inf, 'unsigned char')



training_image_path = 'data/train-images-idx3-ubyte';
fp = fopen(training_image_path, 'rb');

magic = fread(fp, 1, 'int32', 0, 'ieee-be');

numImages = fread(fp, 1, 'int32', 0, 'ieee-be');
numRows = fread(fp, 1, 'int32', 0, 'ieee-be');
numCols = fread(fp, 1, 'int32', 0, 'ieee-be');

images = fread(fp, inf, 'unsigned char');
images = reshape(images, numCols, numRows, numImages);
images = permute(images,[2 1 3]);





############################################################
%   Your pca script should be found here.
% --> add your code including important comments about what bullet-points (1-8 from above you considered when/where) here!

training_label_path = 'data/train-labels-idx1-ubyte';
lfp = fopen(training_label_path, 'rb');

magic_l = fread(lfp, 2, 'int32', 0, 'ieee-be');
labels = fread(lfp, inf, 'unsigned char');

fclose(lfp);


training_image_path = 'data/train-images-idx3-ubyte';
fp = fopen(training_image_path, 'rb');

magic = fread(fp, 1, 'int32', 0, 'ieee-be');

numImages = fread(fp, 1, 'int32', 0, 'ieee-be');
numRows = fread(fp, 1, 'int32', 0, 'ieee-be');
numCols = fread(fp, 1, 'int32', 0, 'ieee-be');

images = fread(fp, inf, 'unsigned char');
images = reshape(images, numCols, numRows, numImages);
images = permute(images,[2 1 3]);

images = reshape(images, size(images, 1) * size(images, 2), size(images, 3))';

fclose(fp);

%size(images);
%test_image = images(6,:);
%reshaped = reshape(test_image, 28, 28);
%imshow(reshaped);
%imshow(reshape(images(2,:), 28, 28))

%ones = find(labels == 1);
%twos = find(labels == 2);

% coefff = pca(images)
%coeff = pca(images, "NumComponents",2);
coeff = pca(images);

c1 = coeff(:,1);
c2 = coeff(:,2);

first_component = images*c1;
second_component = images*c2;

set(gcf,'position',[0, 0 ,700, 500]);
gscatter(first_component, second_component, labels)

title('PCA of MNIST training data')

xlabel('First Component')
ylabel('Second Component')



training_label_path = 'data/t10k-labels-idx1-ubyte';
lfp = fopen(training_label_path, 'rb');

magic_tl = fread(lfp, 2, 'int32', 0, 'ieee-be');
test_labels = fread(lfp, inf, 'unsigned char');

fclose(lfp);


training_image_path = 'data/t10k-images-idx3-ubyte';
fp = fopen(training_image_path, 'rb');

magic = fread(fp, 1, 'int32', 0, 'ieee-be');

t_numImages = fread(fp, 1, 'int32', 0, 'ieee-be');
t_numRows = fread(fp, 1, 'int32', 0, 'ieee-be');
t_numCols = fread(fp, 1, 'int32', 0, 'ieee-be');

t_images = fread(fp, inf, 'unsigned char');
t_images = reshape(t_images, t_numCols, t_numRows, t_numImages);
t_images = permute(t_images,[2 1 3]);


t_images = reshape(t_images, size(t_images, 1) * size(t_images, 2), size(t_images, 3))';

t_comp1 = t_images*c1;
t_comp2 = t_images*c2;

set(gcf,'position',[0, 0 ,700, 500]);
gscatter(t_comp1, t_comp2, test_labels)

title('PCA of MNIST test data')

xlabel('First Component')
ylabel('Second Component')


###############################################
t = images(3,:)
labels(3)
size(t)
size(coeff)
imshow(reshape(coeff(5) * coeff(4) * coeff(3) * coeff(2) * coeff(1) * t, 28, 28))


















% Number of rows and columns of axes
ncols = 5;
nrows = 3;

% w and h of each axis in normalized units
axisw = (1 / ncols) * 0.95;
axish = (1 / nrows) * 0.95;



for ii=1:20

    % calculate the row and column of the subplot
    row = floor( ii/(ncols+1) ) + 1;
    col = mod( ii-1, ncols ) + 1;

    % calculate the left, bottom coordinate of this subplot
    axisl = (axisw+0.02) * (col-1);
    axisb = (axish+0.02) * (row-1);

    %  plot the subplot
    %h= subplot('position', [axisl, axisb, axisw, axish] ); 
    
    %imshow(reshape(reconstruction(ii,:), 28, 28)); 
    %title(['Image ' int2str(ii)]); 

    
end



%for i = 1 : 10;   
%        subplot(5, 2 ,i);
%        imshow(reshape(fst20(i,:), 28, 28), 'InitialMagnification',500);
%end

%imshow(fst20(:,:,1), 'InitialMagnification', 1000)
%imshow(reshape(reconstruction(img,:), 28, 28), 'InitialMagnification',1500)
%labels(img, 1)


